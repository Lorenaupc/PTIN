#include <NewPing.h>

#define MAXIMUM_DISTANCE 500 // in cm
NewPing sensor0 = NewPing(10, 11, MAXIMUM_DISTANCE);
NewPing sensor1 = NewPing(6, 9, MAXIMUM_DISTANCE); 

// variables 
int distance0, distance1;
int average = 0;
bool detects0 = false;
bool detects1 = false;
int counter = 0;
double seg,fd = 0;

int sensor0Value = 0;
int sensor1Value = 0;
int sensorMin = MAXIMUM_DISTANCE;
int sensorMax = 0;
int calibracio = 0;

// start main program PR2&PR3
void setup() {
  Init_Sensors();
}

void loop() {
  SENSOR_TASK();
  //end main program PR2&PR3
}


//Funci√≥ d'enviar el comptador cap al PR2
//void enviar() {
  //int x = counter;
  //cridem funcio wifi
//}

void Init_Sensors() {
  Serial.begin (9600);
  seg = millis();
  Calibration();
}

void Calibration() {
    while (millis() < 1000) {   // calibrate during the first five seconds
      sensor0Value = analogRead(10);
      sensor1Value = analogRead(6);

      if (sensor0Value > sensorMax) sensorMax = sensor0Value;  // record the maximum sensor0 value
      if (sensor1Value > sensorMax) sensorMax = sensor1Value;  // record the maximum sensor1 value
      if (sensor0Value < sensorMin) sensorMin = sensor0Value;  // record the minimum sensor0 value
      if (sensor1Value < sensorMin) sensorMin = sensor1Value;  // record the minimum sensor1 value
      
    }
  
  Serial.println("calibration completed");  // end of the calibration period
}

void SENSOR_TASK() {
  
  sensor0Value = analogRead(10);                                      // read the sensor0   
  sensor1Value = analogRead(6);                                       // read the sensor1    
  sensor0Value = map(sensor0Value, sensorMin, sensorMax, 0, 255);    // apply the calibration to the sensor0 reading
  sensor1Value = map(sensor1Value, sensorMin, sensorMax, 0, 255);    // apply the calibration to the sensor1 reading
  sensor0Value = constrain(sensor0Value, 0, 255);  // in case the sensor0 value is outside the range seen during calibration
  sensor1Value = constrain(sensor1Value, 0, 255);  // in case the sensor1 value is outside the range seen during calibration
 
  int state;
  int rang;
  //Serial.print("Aquests son els segons que han passat: ");
  //Serial.println(seg);
  //Serial.print("Aquests son els segons que han passat des de l'ultima persona entrant: ");
  //Serial.println(millis()-seg);
  
  if ((millis()-seg) < 5000){
    //Serial.println("CAGUN DEU");
    state=1;
  }
  else if ((millis()-seg) > 5000){
    //Serial.println("ENVIANT");
    state=2;
  }
  switch (state){
    case 1:    //COMPTADOR
      //Serial.println("/////////////////////////////////////////////////////Contar/////////////////////////////////////////////////////");
      Count();
      break;
    case 2:
      Serial.println("/////////////////////////////////////////////////////Enviar/////////////////////////////////////////////////////");
      seg = millis();
      //enviar();
      break;
  }
}

void Count() {

  distance0 = sensor0.ping_cm();
  distance1 = sensor1.ping_cm();
  int range =  average - 30;
  int fakedelay = 1000;
  //Serial.print("HOSTIAA PUTA YA: ");
  //Serial.println(seg);
  if(fd == 0 or fd+fakedelay < millis()){
    
      if(distance0 < 10) {   
        
        Serial.println("detected sensor 0: ");
        Serial.println(distance0);
    
        if(detects1 and !detects0) {
          
          Serial.println("people in the room: ");
          Serial.println(counter); 
          counter++;
          
        }
         
        detects0 = true;
        
      }
      else if(distance1 < 10) {
        
        Serial.print("detected sensor 1:");
        Serial.println(distance1);
        if(detects0 and !detects1) {
          
          counter--;
          Serial.print("people in the room:");
          Serial.println(counter);
          
        }    
        detects1 = true;    
      }
      
      if(detects0 and detects1 and distance0 > 10 and distance1 > 10) {
        seg = millis();
        detects0 = false;
        detects1 = false;
        Serial.println("people in the room: ");
        Serial.println(counter);     
        fd = millis();
       // delay(1000);
      }
  }
  //delay(50);        
  
}
