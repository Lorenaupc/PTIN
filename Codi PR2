#include <SPI.h>
#include <WiFi.h>
#include <string.h>
#include <NewPing.h>
#include <QueueList.h>

#define MAXIMUM_DISTANCE 500// in cm
#define PING_INTERVAL 33// Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).
unsigned long pingTimer[2];// Holds the times when the next ping should happen for each sensor.
unsigned int cm[2];// Where the ping distances are stored.
uint8_t currentSensor = 0;// Keeps track of which sensor is active.


NewPing sonar[2] = {// Sensor object array. Each sensor's trigger pin, echo pin, and max distance to ping.
    NewPing(3, 5, MAXIMUM_DISTANCE),
    NewPing(6, 9, MAXIMUM_DISTANCE)
};

//Global Variables
char ssid[5];     //  your network SSID (name)
char pass[18];
byte mac[6];                      //MAC address
IPAddress server;
int status;     // the Wifi radio's status
WiFiClient client;
int estat;
// estat = 0 -> IDLE
// estat = 1 -> send
// estat = 2 -> SLEEP
unsigned long tics;
unsigned long time;
unsigned long timeConect;
unsigned long timeSend;
String macaddress;
QueueList <String> queue;
int range = 0; //holds the range where you can detect something 
bool sensor0 = false; //sensor 0 first to detect
bool sensor1 = false; //sensor 1 .....
bool send_counter = false; //signal to sent the counter
bool ack_ok = false; //signal to wait for ack //true when received
bool counted = false; //signal to know if someone was detected
//global counter
int counter = 0;
//timers
double timer; //sensor_task timer
double main_timer; //loop timer

//Init functions
void init_wifi(){
  Serial.println("Setup!!");
  
  tics= millis();
  strcpy(ssid, "XARD"); 
  strcpy(pass, "PTIN:@2015arduino");
  IPAddress ip(10, 20, 46, 252);
  IPAddress dns(8, 8, 4, 4);
  IPAddress gw(10, 20, 46, 254);
  WiFi.config(ip, dns, gw); 
  WiFi.macAddress(mac);        // variable on guardarem l'identificador MAC del wifishield.
  server = IPAddress(173, 194, 116, 175);  // numeric IP for Google (no DNS)
  //strcpy(server, "147.83.159.200");    // name address for Google (using DNS)
  status = WL_IDLE_STATUS;
  macaddress = getmac(mac);
  estat = 0;
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);
}

void Init_Sensors() {
  //Serial.begin (9600);
  // Set the printer of the queue.
  queue.setPrinter (Serial);
  Calibration();
  timer= millis();
}

//Loop Functions
void sensor_task() {
  
  int state;
  
  if (!counted or (millis()-timer) <= 5000){ //if none was previously counted or not time to send keep counting //so if time to send but none counted keep counting
    state=1;
    counted = false;
  }
  else if (counted and (millis()-timer) > 5000){ //if someone was counted and is time to send
    state=2;
  }
  switch (state){
    case 1:
      //Serial.println("/////////////////////////////////////////////////////Contar/////////////////////////////////////////////////////");
      Count();
      timer = millis();
      break;
    case 2:
      //Serial.println("/////////////////////////////////////////////////////Enviar/////////////////////////////////////////////////////");
      //trigger send signals
      send_counter = true;
      ack_ok = false;
      break;
  }
}

void wifi_task(){
  if (estat == 0){
    idle();
  }else if(estat == 1){
    envia();
  }else if ( estat ==2){
    sleep();
  } 
}

//Idle functions
void idle(){
  //Serial.println("iddle");
  time = millis();
  if ((status != WL_CONNECTED) and (((time - timeConect) > 10000) or ((time-timeConect) < 0))) {
    time = millis();
    timeConect = millis();
    conectWifi();
  }
  if (status == WL_CONNECTED) {
    if(send_counter == true && timeSend == 0){
       estat = 1;
       timeSend = millis();
    }
    else if(send_counter == false && (millis() - timeSend > 10000)){
        String response;
        while (client.available()){
            Serial.println("astic al while");
            char c = client.read();
            response = response + String(c);
        }
        
        if(response.find("200 OK")){
            ack_ok = true;
        }
        else{
            send_counter = true;
        }
    }
  }
  if((send_counter==false) and ((time-timeSend) > 300000) or ((time-timeSend) < 0)){//comprovem que pasin 5 minuts y que no hi hagin dades pendents
    estat = 2;
    WiFi.disconnect(); //desconectem del wifi
  }
  time = millis();
}

void Count() {//chechs the 2 sensors for distance
  for (uint8_t i = 0; i < 2; i++) { // Loop through all the sensors.
        if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
            pingTimer[i] += PING_INTERVAL * 2;  // Set next time this sensor will be pinged.
            if (i == 0 && currentSensor == 2 - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
            sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
            currentSensor = i;                          // Sensor being accessed.
            cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
            sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
        }
    }
}

//State functions
void envia(){
      Serial.println("connected to server");
      // Make a HTTP request:
      if (client.connect(server, 80)) {
        //Serial.println("Panxos im in!");
        client.println("GET /first.jersey.web.service/rest/hello/"+counter);
        client.println("Host: 147.83.159.200");//name of server
        client.println("Connection: close");
        client.println();
      }
	  estat = 0;
	  send_counter = false;
}

void sleep(){
  Serial.println("in sleep....");
  if (send_counter) estat=0;
  //if (status != WL_CONNECTED) {
    //time = millis();
    //timeConect = millis();
    //conectWifi();
  //}
}

//Auxiliar functions
String getmac(byte mac[]){ 
  // Mostra per pantalla la MAC de la WiFi:
  String macstr;
  for (int i=5; i >= 0; i--) {
    String temp = String(mac[i], HEX);
    if (temp.length() == 1) temp = String("0" + temp);
    macstr = String(macstr + temp);
    if (i > 0) macstr = String(macstr + ":");
  }
  return macstr;
}

void conectWifi(){
   Serial.print("Attempting to connect to SSID: ");
   
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
}

void Calibration() {
  ///***///set range from 0 to max distande = range
}

void echoCheck() { // If ping received, set the sensor distance to array.
    if (sonar[currentSensor].check_timer()){
        cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
        ///***///chech if the reading was in range
        if(cm[currentSensor] <= range){
            //first sensor to detect to know direction
            if(currentSensor == 0)
                bool sensor0 = true;//the sensor 0 detected first
            else
               bool sensor1 = true;//the sensor 1 detected first  
        }  
    }
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
    for (uint8_t i = 0; i < 2; i++) {
    ///***///write sensor data to list 
    ///llista de 10 posicions
    //funciona com una fifo aqui es posa una dada pel darrere
    //la funcio people check borrar una per davant un cop la llista tingi un size de 10-15  
    }
    //call function to check list for people
    people_check();
}

void people_check(){
  ///***///
  //var sensor0, sensor1 holds the first sensor to encounter something
  //checks the list for people to count
  //if someone was tetected refresh the counter
  //counted = true
  //else counted = false
  counter = 10;
  counted = true;
}

void setup() {
 Serial.begin(9600);
   if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }
  init_wifi();
  Init_Sensors();
  
  /*Serial.print(ssid);
  Serial.print(pass);
  Serial.print(server);
  Serial.print(estat);*/
}

void loop() {
  if ((millis() - tics) > 10){
    wifi_task();
    tics= millis();
  }
  if ((millis() - timer) > 6000){
    send_counter = true;
    counter++;
    //sensor_task();
    timer= millis();
  }
}

