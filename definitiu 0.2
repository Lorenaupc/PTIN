#include <SPI.h>
#include <WiFi.h>
#include <string.h>
#include <NewPing.h>
#include <QueueList.h>

#define MAXIMUM_DISTANCE 500// in cm
#define PING_INTERVAL 33// Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).
unsigned long pingTimer[2];// Holds the times when the next ping should happen for each sensor.
int cm[2];// Where the ping distances are stored.
uint8_t currentSensor = 0;// Keeps track of which sensor is active.


NewPing sonar[2] = {// Sensor object array. Each sensor's trigger pin, echo pin, and max distance to ping.
    NewPing(3, 5, MAXIMUM_DISTANCE),
    NewPing(6, 9, MAXIMUM_DISTANCE)
};

//Global Variables
char ssid[5];     //  your network SSID (name)
char pass[18];
byte mac[6];                      //MAC address
char server[15];
int status;     // the Wifi radio's status
WiFiClient client;
int estat;
// estat = 0 -> IDLE
// estat = 1 -> send
// estat = 2 -> SLEEP
unsigned long tics;
unsigned long time;
unsigned long timeConect;
unsigned long timeSend;
String macaddress;
QueueList <String> queue;
//global sensor list
QueueList <int> zenzor0;
QueueList <int> zenzor1;
int range = MAXIMUM_DISTANCE; //holds the range where you can detect something 
bool sensor0 = false; //sensor 0 first to detect
bool sensor1 = false; //sensor 1 .....
bool send_counter = false; //signal to sent the counter
bool ack_ok = false; //signal to wait for ack //true when received
bool counted = false; //signal to know if someone was detected
//global counter
int counter = 0;
//timers
double timer; //sensor_task timer
double main_timer; //loop timer

//Init functions
void init_wifi(){
  //Serial.println("Setup!!");
  tics= millis();
  strcpy(ssid, "XARD"); 
  strcpy(pass, "PTIN:@2015arduino");
  WiFi.macAddress(mac);        // variable con guardarem l'identificador MAC del wifishield.
//IPAddress server(74,125,232,128);  // numeric IP for Google (no DNS)
  strcpy(server, "147.83.159.201");    // name address for Google (using DNS)
  status = WL_IDLE_STATUS;
  macaddress = getmac(mac);
  estat = 0;
}

void Init_Sensors() {
  //Serial.begin (9600);
  // Set the printer of the queue.
  Calibration();
  timer= millis();
  zenzor0.setPrinter(Serial);
  zenzor1.setPrinter(Serial);
  
}

//Loop Functions
void sensor_task() {
  
  //Serial.println("sensor_taks");  
  if (!counted or (millis()-timer) <= 5000){ //if none was previously counted or not time to send keep counting //so if time to send but none counted keep counting
    Count();
    timer = millis();
  }
  else if (counted and (millis()-timer) > 5000){ //if someone was counted and is time to send
    send_counter = true;
    ack_ok = false;
  }
}

void wifi_task(){
  if (estat == 0){
    idle();
  }else if(estat == 1){
    envia();
  }else if ( estat ==2){
    sleep();
  } 
}

//Idle functions
void idle(){
  //Serial.println("iddle");
  time = millis();
  if ((status != WL_CONNECTED) and (((time - timeConect) > 10000) or ((time-timeConect) < 0))) {
    time = millis();
    timeConect = millis();
    conectWifi();
  }
  if (status == WL_CONNECTED) {
    if(send_counter == true){
       estat = 1;
    }
  }
  if((send_counter==false) and ((time-timeSend) > 300000) or ((time-timeSend) < 0)){//comprovem que pasin 5 minuts y que no hi hagin dades pendents
    estat = 2;
    WiFi.disconnect(); //desconectem del wifi
  }
  time = millis();
}

void Count() {//chechs the 2 sensors for distance
  for (uint8_t i = 0; i < 2; i++) { // Loop through all the sensors.
        if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
            pingTimer[i] += PING_INTERVAL * 2;  // Set next time this sensor will be pinged.
            if (i == 0 && currentSensor == 2 - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
            sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
            currentSensor = i;                          // Sensor being accessed.
            cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
            sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
        }
    }
}

//State functions
void envia(){
      Serial.println("connected to server");
      // Make a HTTP request:
      client.println("GET /"+macaddress+"/"+counter);
      client.println("Host: www.google.com");//name of server
      client.println("Connection: close");
      client.println();
	  estat = 0;
	  send_counter = false;
}

void sleep(){
  Serial.println("in sleep....");
  if (send_counter) estat=0;
  //if (status != WL_CONNECTED) {
    //time = millis();
    //timeConect = millis();
    //conectWifi();
  //}
}

//Auxiliar functions
String getmac(byte mac[]){ 
  // Mostra per pantalla la MAC de la WiFi:
  String macstr;
  for (int i=5; i >= 0; i--) {
    String temp = String(mac[i], HEX);
    if (temp.length() == 1) temp = String("0" + temp);
    macstr = String(macstr + temp);
    if (i > 0) macstr = String(macstr + ":");
  }
  return macstr;
}

void conectWifi(){
   Serial.print("Attempting to connect to SSID: ");
   
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
}

void Calibration() {
  ///***///set range from 0 to max distande = range
}

void echoCheck() { // If ping received, set the sensor distance to array.
    if (sonar[currentSensor].check_timer()){
        cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
        ///***///chech if the reading was in range
        if(cm[currentSensor] <= range){
            //first sensor to detect to know direction
            if(currentSensor == 0)
                bool sensor0 = true;//the sensor 0 detected first
            else
               bool sensor1 = true;//the sensor 1 detected first  
        }  
    }
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
    zenzor0.push( cm[0] );
    zenzor1.push( cm[1] );
    Serial.print("sonar 0: ");
    Serial.println(cm[0]);
    Serial.print("sonar 1: ");
    Serial.println(cm[1]);
    Serial.print("Sensor0 push: ");
    Serial.println(zenzor0.peek());
    Serial.print("Sensor1 push: ");
    Serial.println(zenzor1.peek());
    ///***///write sensor data to list
    //funciona com una fifo aqui es posa una dada pel darrere
    //la funcio people check borrar una per davant un cop la llista tingi un size de 10-15

    //call function to check list for people
    people_check();
}

void people_check(){
  ///***///
  if ( !sensor0 and !sensor1 and zenzor0.count() >= 10 and zenzor1.count() >= 10 ){
    //Borrar tota les posicions del QueueList's
    int i=0;
    while ( i < zenzor0.count() ){
      zenzor0.pop();
      i++;
    }
    
    i=0;
    while ( i < zenzor1.count() ){
      zenzor1.pop();
      i++;
    }
    counted = false;
    
  }else if ( !sensor0 and sensor1 ){//Entra
    int c0=0, c1=0;
    for (int i=0; i < zenzor0.count(); i++){
      if ( zenzor0.pook(i) ){
        c0++;
      }
    }
    
    for (int j=0; j < zenzor1.count(); j++){
      if ( zenzor1.pook(j) ){
        c1++;
      }
    }
    
    if ( c0 == c1 ){
      counter = counter + c0;
    }else if ( c0 < c1 ){
      counter = counter+c1;
    }else if ( c0 > c1 ){
      counter = counter+c0;
    }
    
    counted = true;
    Serial.println(counted);
  }else if ( sensor0 and !sensor1 ) {//Surt
      int c0=0, c1=0;
    for (int i=0; i < zenzor0.count(); i++){
      if ( zenzor0.pook(i) ){
        c0++;
      }
    }
    
    for (int j=0; j < zenzor1.count(); j++){
      if ( zenzor1.pook(j) ){
        c1++;
      }
    }
    
    if ( c0 == c1 ){
      counter = counter - c0;
    }else if ( c0 < c1 ){
      counter = counter - c1;
    }else if ( c0 > c1 ){
      counter = counter - c0;
    }
    
    counted = true;
    Serial.println(counted);
  }
}

void setup() {
 Serial.begin(9600);
  //init_wifi();
  Init_Sensors();
  timer = millis();
  /*Serial.print(ssid);
  Serial.print(pass);
  Serial.print(server);
  Serial.print(estat);*/
}

void loop() {
  if ((millis() - tics) > 10){
   // wifi_task();
    tics= millis();
  }
  if ((millis() - timer) > 5){
    sensor_task();
    timer= millis();
  }
}
