#include <NewPing.h>

#define MAXIMUM_DISTANCE 500 // in cm
#define STATE_IDLE  0
#define STATE_COUNT 1
#define STATE_SEND  2
#define TIME_DELAY 3000 //sets delay value in all delay() calls

NewPing sensor0 = NewPing(10, 11, MAXIMUM_DISTANCE);
NewPing sensor1 = NewPing(6, 9, MAXIMUM_DISTANCE); 

// variables 
int distance0, distance1;
int average = 0;
bool detects0 = false;
bool detects1 = false;

int sensor0Value = 0;
int sensor1Value = 0;
int sensor0Min = 3;
int sensor1Min = 3;
int sensor0Max = 0;
int sensor1Max = 0;

int counter = 1;
int fsm_state; // our state variable
unsigned long time;     // Holds the next ping time.

// start main program PR2&PR3
void setup() {
  
  Init_Sensors();
}

void loop() {
  SENSOR_TASK(); 
}
// end main program PR2&PR3
void Init_Sensors() {
  
  Serial.begin (9600);   
  Calibration();
  
  Serial.println("Serial communication started");
  fsm_state = STATE_IDLE; // state variable initialization
  
}
void Calibration() {
  
  /*while (millis() < 1000) {   // calibrate during the first five seconds
  
      sensor0Value = analogRead(sensor0.ping_cm());
      sensor1Value = analogRead(sensor1.ping_cm());

      if (sensor0Value > sensor0Max) sensor0Max = sensor0Value;  // record the maximum sensor0 value
      if (sensor1Value > sensor1Max) sensor1Max = sensor1Value;  // record the maximum sensor1 value
      if (sensor0Value < sensor0Min) sensor0Min = sensor0Value;  // record the minimum sensor0 value
      if (sensor1Value < sensor1Min) sensor1Min = sensor1Value;  // record the minimum sensor1 value
      Serial.print("MIN0: ");
      Serial.print(sensor0Min);
      Serial.print(" MIN1 : ");
      Serial.println(sensor1Min);
      Serial.print("MAX0: ");
      Serial.print(sensor0Max);
      Serial.print(" MAX1 : ");
      Serial.println(sensor1Max);
     
  }*/
  
  
   int temp0 = sensor0.ping_median(10); 
   int temp1 = sensor1.ping_median(10);
   sensor0Max = sensor0.convert_cm(temp0);
   sensor1Max = sensor1.convert_cm(temp1);
   Serial.print("MIN0: ");
      Serial.print(sensor0Min);
      Serial.print(" MIN1 : ");
      Serial.println(sensor1Min);
      Serial.print("MAX0: ");
      Serial.print(sensor0Max);
      Serial.print(" MAX1 : ");
      Serial.println(sensor1Max);
   
  
  
  
  
  Serial.println("Calibration completed");  // end of the calibration period
}

void SENSOR_TASK() {
  
  /*sensor0Value = analogRead(sensor0.ping_cm());                                      // read the sensor0   
  sensor1Value = analogRead(sensor1.ping_cm()); */ // read the sensor1 
  int temp0 = sensor0.ping_median(10); 
   int temp1 = sensor1.ping_median(10);
   sensor0Value = sensor0.convert_cm(temp0);
   sensor1Value = sensor1.convert_cm(temp1);  
  /*Serial.print("sensor0ValueINI: ");
  Serial.println(sensor0Value);
  Serial.print("sensor1ValueINI: ");
  Serial.println(sensor1Value);*/
  //sensor0Value = map(sensor0Value, sensor0Min, sensor0Max, sensor0Max, sensor0Min);    // apply the calibration to the sensor0 reading
  //sensor1Value = map(sensor1Value, sensor1Min, sensor1Max, sensor1Max, sensor1Min);    // apply the calibration to the sensor1 reading
      /*Serial.print("MIN0 i MIN1: ");
      Serial.println(sensor0Min);
      Serial.println(sensor1Min);
      Serial.print("MAX0 i MAX1:");
      Serial.println(sensor0Max);
      Serial.println(sensor1Max);*/
  //sensor0Value = constrain(sensor0Value, sensor0Min, sensor0Max);  // in case the sensor0 value is outside the range seen during calibration
  //sensor1Value = constrain(sensor1Value, sensor1Min, sensor1Max);  // in case the sensor1 value is outside the range seen during calibration
  
  Serial.print("sensor0Value: ");
  Serial.println(sensor0Value);
  Serial.print("sensor1Value: ");
  Serial.println(sensor1Value);
  
  average = (sensor0Value+sensor1Value)/2;
  
  Serial.print("average:");
  Serial.println(average);
  
  switch(fsm_state) { // start of switch case
  
    case 0:
      //do instructions in STATE_IDLE
      Serial.println("I am IDLE");
      if(sensor0.ping_cm() < 30 or sensor1.ping_cm() < 30) {
        fsm_state = STATE_COUNT;
      }
      else delay(1000);
      break;
    
    case 1:
    int time = millis();
      Count();
      if(millis()-time > 1000) fsm_state = STATE_IDLE;
    break;
  }    
  delay(1);  //delay in between reads for stability*/
}
void Count() {
  int temp0 = sensor0.ping_median(10); 
   int temp1 = sensor1.ping_median(10);
   distance0 = sensor0.convert_cm(temp0);
   distance1 = sensor1.convert_cm(temp1); 
  /*distance0 = sensor0.ping_cm();
  distance1 = sensor1.ping_cm();*/
  int range =  average - 30; 
 
  if(distance0 < range) {   
    
    Serial.print("detected sensor 0: ");
    Serial.println(distance0);
    Serial.print("detected sensor 1: ");
    Serial.println(distance1);
    if(detects1 and !detects0) {
      
      counter++;
      Serial.print("people in the room: ");
      Serial.println(counter); 
      
    }
     
    detects0 = true;
    
  }
  else if(distance1 < range) {
    
    if(detects0 and !detects1) {
      
      counter--;
      Serial.print("people in the room: ");
      Serial.println(counter); 
      
    }
    
    detects1 = true;
    Serial.print("detected sensor 0: ");
    Serial.println(distance0);
    Serial.print("detected sensor 1: ");
    Serial.println(distance1);
    
  }
  
  if(detects0 and detects1 and distance0 > range and distance1 > range) {
    
        detects0 = false;
        detects1 = false;        
  }
  
  Serial.print("people in the room: ");
  Serial.println(counter);           
  
}
